# -*- coding: utf-8 -*-
"""Model Drift.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1x8R9JdXbPET5TlwuwlFsOrfcpXMJQqKp
"""

import pandas as pd
from sklearn.metrics import accuracy_score, f1_score, mean_squared_error
from math import sqrt

def main():
    df = pd.read_csv('https://storage.googleapis.com/ds-publico/IA/MonitoringDrifts.csv', delimiter=",")

    # Avaliação da classificação
    evaluate_classification(df)

    # Avaliação da regressão
    evaluate_regression(df)

def evaluate_classification(df):
    accuracy = accuracy_score(df['class_choosen'], df['class_predicted'])
    f1 = f1_score(df['class_choosen'], df['class_predicted'], average='weighted')

    print(f'Acurácia: {accuracy * 100:.2f}%')
    print(f'F1-Score: {f1 * 100:.2f}%')

    if accuracy < 0.8:
        print("\nReavaliar o modelo de classificação devido à baixa acurácia.")
        print("Meses que precisam ser reavaliados:")
        print(df.loc[(df['class_choosen'] != df['class_predicted']), 'month'].unique())

    if f1 < 0.8:
        print("\nReavaliar o modelo de classificação devido ao baixo F1-Score.")
        print("Meses que precisam ser reavaliados:")
        print(df.loc[(df['class_choosen'] != df['class_predicted']), 'month'].unique())

def evaluate_regression(df):
    rmse = sqrt(mean_squared_error(df['expected'], df['spent']))

    print(f'\nRMSE: {rmse:.2f}')

    if rmse > 0.2:
        print("\nReavaliar o modelo de regressão devido a um alto RMSE.")
        print("Meses que precisam ser reavaliados:")
        print(df.loc[(df['expected'] != df['spent']), 'month'].unique())

if __name__ == "__main__":
    main()